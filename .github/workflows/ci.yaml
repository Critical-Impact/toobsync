name: Run Django tests for TubeSync

env:
  IMAGE_NAME: tubesync

on:
  workflow_dispatch:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
    types:
      - opened
      - reopened
      - synchronize
      - ready_for_review

jobs:
  info:
    if: ${{ !cancelled() && 'pull_request' != github.event_name }}
    runs-on: ubuntu-latest
    outputs:
      ffmpeg-releases: ${{ steps.ffmpeg.outputs.releases }}
      string-lowercase: ${{ steps.string.outputs.lowercase }}
      ytdlp-latest-release: ${{ steps.yt-dlp.outputs.latest-release }}
      ytdlp-releases: ${{ steps.yt-dlp.outputs.releases }}
    steps:
      - name: Lowercase github username for ghcr
        id: string
        uses: ASzc/change-string-case-action@v6
        with:
          string: ${{ github.actor }}
      - name: Retrieve yt-dlp/FFmpeg-Builds releases with GitHub CLI
        id: ffmpeg
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GH_API_GQL_ASSETS: 25
          GH_API_GQL_RELEASES: 35
          GH_API_GQL_OWNER: yt-dlp
          GH_API_GQL_REPO: FFmpeg-Builds
        run: |
          gql_query='query($repo: String!, $owner: String!, $releases: Int!, $assets: Int!) { repository(owner: $owner, name: $repo) { releases(first: $releases, orderBy: { field: CREATED_AT, direction: DESC }) { nodes { tagName, isDraft, isPrerelease, isLatest, tag { name, target { oid, commitUrl } }, releaseAssets(first: $assets) { totalCount, nodes { name, size, downloadUrl } } } } } }' ;
          gql_jq='[ .data.repository.releases.nodes[] | select((.isLatest or .isDraft or .isPrerelease) | not) | { "tag": .tag.name, "commit": .tag.target.oid, "date": .tag.name[1+(.tag.name|index("-")):], "assets": { "limit": '"${GH_API_GQL_ASSETS}"', "totalCount": .releaseAssets.totalCount }, "files": .releaseAssets.nodes, "versions": [ .releaseAssets.nodes[].name | select(contains("-linux64-"))[1+index("-"):index("-linux64-")] ] } ]' ;
          mk_delim() { printf -- '"%s_EOF_%d_"' "$1" "${RANDOM}" ; } ;
          {
            var='releases' ;
            delim="$(mk_delim "${var}")" ;
            printf -- '%s<<%s\n' "${var}" "${delim}" ;
            gh api graphql --cache 12h \
              -F assets="${GH_API_GQL_ASSETS}" \
              -F owner="${GH_API_GQL_OWNER}" \
              -F repo="${GH_API_GQL_REPO}" \
              -F releases="${GH_API_GQL_RELEASES}" \
              -f query="${gql_query}" --jq "${gql_jq}" ;
            printf -- '%s\n' "${delim}" ;
            unset -v delim jq_arg var ;
          } >> "${GITHUB_OUTPUT}" ;
          # Log the human version
          gh api graphql --cache 12h \
            -F assets="${GH_API_GQL_ASSETS}" \
            -F owner="${GH_API_GQL_OWNER}" \
            -F repo="${GH_API_GQL_REPO}" \
            -F releases="${GH_API_GQL_RELEASES}" \
            -f query="${gql_query}" --jq "${gql_jq}" | jq '.[]' -- ;
      - name: Retrieve yt-dlp/yt-dlp releases with GitHub CLI
        id: yt-dlp
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GH_API_GQL_RELEASES: 25
          GH_API_GQL_OWNER: yt-dlp
          GH_API_GQL_REPO: yt-dlp
        run: |
          gql_query='query($repo: String!, $owner: String!, $releases: Int!) { repository(owner: $owner, name: $repo) { releases(first: $releases, orderBy: { field: CREATED_AT, direction: DESC }) { nodes { name, createdAt, publishedAt, updatedAt, tagName, url, isDraft, isPrerelease, isLatest, tag { name, target { oid, commitUrl } } } } } }' ;
          gql_jq='[ .data.repository.releases.nodes[] | select((.isDraft or .isPrerelease) | not) | del(.isDraft, .isPrerelease) ]' ;
          mk_delim() { printf -- '"%s_EOF_%d_"' "$1" "${RANDOM}" ; } ;
          {
            var='releases' ;
            delim="$(mk_delim "${var}")" ;
            printf -- '%s<<%s\n' "${var}" "${delim}" ;
            gh api graphql --cache 12h \
              -F owner="${GH_API_GQL_OWNER}" \
              -F repo="${GH_API_GQL_REPO}" \
              -F releases="${GH_API_GQL_RELEASES}" \
              -f query="${gql_query}" --jq "${gql_jq}" ;
            printf -- '%s\n' "${delim}" ;
            jq_arg='map(select(.isLatest))[0]' ;
            var='latest-release' ;
            delim="$(mk_delim "${var}")" ;
            printf -- '%s<<%s\n' "${var}" "${delim}" ;
            gh api graphql --cache 12h \
              -F owner="${GH_API_GQL_OWNER}" \
              -F repo="${GH_API_GQL_REPO}" \
              -F releases="${GH_API_GQL_RELEASES}" \
              -f query="${gql_query}" --jq "${gql_jq}" | jq -c "${jq_arg}" -- ;
            printf -- '%s\n' "${delim}" ;
            unset -v delim jq_arg var ;
          } >> "${GITHUB_OUTPUT}" ;
          # Log the human version
          gh api graphql --cache 12h \
            -F owner="${GH_API_GQL_OWNER}" \
            -F repo="${GH_API_GQL_REPO}" \
            -F releases="${GH_API_GQL_RELEASES}" \
            -f query="${gql_query}" --jq "${gql_jq}" | jq '.[]' -- ;

  test:
    if: ${{ !cancelled() && ( 'pull_request' != github.event_name || (! github.event.pull_request.draft) ) }}
    runs-on: ubuntu-22.04
    strategy:
      fail-fast: false
      matrix:
        python-version: ['3.8', '3.9', '3.10', '3.11', '3.12']
    steps:
      - uses: actions/checkout@v4
      - name: Install Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pipenv
          pipenv install --system --skip-lock
      - name: Set up Django environment
        run: |
          cp -v -p tubesync/tubesync/local_settings.py.example tubesync/tubesync/local_settings.py
          cp -v -a -t "${Python3_ROOT_DIR}"/lib/python3.*/site-packages/background_task/ patches/background_task/*
          cp -v -a -t "${Python3_ROOT_DIR}"/lib/python3.*/site-packages/yt_dlp/ patches/yt_dlp/*
      - name: Run Django tests
        run: cd tubesync && python3 manage.py test --verbosity=2

  containerise:
    if: ${{ !cancelled() && 'success' == needs.info.result }}
    needs: ['info', 'test']
    runs-on: ubuntu-latest
    timeout-minutes: 120
    steps:
      - name: Set environment variables with jq
        run: |
          cat >| .ffmpeg.releases.json <<'EOF'
          ${{ needs.info.outputs.ffmpeg-releases }}
          EOF
          {
            var='FFMPEG_DATE' ;
            delim='"'"${var}"'_EOF"' ;
            printf -- '%s<<%s\n' "${var}" "${delim}" ;
            jq_arg='[foreach .[] as $release ([{}, []]; [ .[0] + {($release.commit): ([ $release.date ] + (.[0][($release.commit)] // []) ) }, [ .[1][0] // $release.commit ] ] ; .[0][(.[1][0])] ) ][-1][0]' ;
            jq -r "${jq_arg}" -- .ffmpeg.releases.json ;
            printf -- '%s\n' "${delim}" ;

            ffmpeg_date="$( jq -r "${jq_arg}" -- .ffmpeg.releases.json )"
            
            var='FFMPEG_VERSION' ;
            delim='"'"${var}"'_EOF"' ;
            printf -- '%s<<%s\n' "${var}" "${delim}" ;
            jq_arg='.[]|select(.date == $date)|.versions[]|select(startswith("N-"))' ;
            jq -r --arg date "${ffmpeg_date}" "${jq_arg}" -- .ffmpeg.releases.json ;
            printf -- '%s\n' "${delim}" ;
            unset -v delim jq_arg var ;
          } >> "${GITHUB_ENV}"
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v3
      - name: Log into GitHub Container Registry
        env:
          DOCKER_REGISTRY: https://ghcr.io
          DOCKER_USERNAME: ${{ github.actor }}
          DOCKER_TOKEN: ${{ 'meeb' == github.repository_owner && secrets.REGISTRY_ACCESS_TOKEN || secrets.GITHUB_TOKEN }}
        run: echo "${DOCKER_TOKEN}" | docker login --password-stdin --username "${DOCKER_USERNAME}" "${DOCKER_REGISTRY}"
      - name: Build and push
        timeout-minutes: 60
        uses: docker/build-push-action@v6
        with:
          platforms: linux/amd64,linux/arm64
          push: ${{ 'success' == needs.test.result && 'meeb' == github.repository_owner && 'true' || 'false' }}
          tags: ghcr.io/${{ needs.info.outputs.string-lowercase }}/${{ env.IMAGE_NAME }}:latest
          cache-from: type=registry,ref=ghcr.io/${{ needs.info.outputs.string-lowercase }}/${{ env.IMAGE_NAME }}:latest
          cache-to: type=inline
          build-args: |
            IMAGE_NAME=${{ env.IMAGE_NAME }}
            FFMPEG_DATE=${{ env.FFMPEG_DATE }}
            FFMPEG_VERSION=${{ env.FFMPEG_VERSION }}
            YTDLP_DATE=${{ fromJSON(needs.info.outputs.ytdlp-latest-release).tag.name }}
